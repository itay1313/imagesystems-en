{"expireTime":9007200897342643000,"key":"https://imagesystems.cn/graphql--introspection-node-queries","val":{"categories":{"typeInfo":{"singularName":"category","pluralName":"categories","nodesTypeName":"Category"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    categories (first: $first, after: $after, ) {\n      \n        nodes {\n           \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        products (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    category (id: $id) {\n       \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        products (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    category (id: $id, idType: ID, asPreview: true) {\n       \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        products (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename\n    }\n  }\n\n  \n","selectionSet":" \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        products (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename","builtFragments":"","settings":{}},"comments":{"typeInfo":{"singularName":"comment","pluralName":"comments","nodesTypeName":"Comment"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    comments (first: $first, after: $after, ) {\n      \n        nodes {\n           agent\n    approved\n    \n        author  {\n           \n        node  {\n           databaseId\n    email\n    id\n    name\n    url\n          \n      __typename\n      \n  ... on User {\n     id\n  }\n\n    \n        }\n      \n          \n        }\n      \n    authorIp\n    \n        commentedOn  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    content\n    databaseId\n    date\n    dateGmt\n    id\n    karma\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    \n        replies (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    type\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    comment (id: $id) {\n       agent\n    approved\n    \n        author  {\n           \n        node  {\n           databaseId\n    email\n    id\n    name\n    url\n          \n      __typename\n      \n  ... on User {\n     id\n  }\n\n    \n        }\n      \n          \n        }\n      \n    authorIp\n    \n        commentedOn  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    content\n    databaseId\n    date\n    dateGmt\n    id\n    karma\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    \n        replies (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    type\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    comment (id: $id, idType: ID, asPreview: true) {\n       agent\n    approved\n    \n        author  {\n           \n        node  {\n           databaseId\n    email\n    id\n    name\n    url\n          \n      __typename\n      \n  ... on User {\n     id\n  }\n\n    \n        }\n      \n          \n        }\n      \n    authorIp\n    \n        commentedOn  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    content\n    databaseId\n    date\n    dateGmt\n    id\n    karma\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    \n        replies (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    type\n    __typename\n    }\n  }\n\n  \n","selectionSet":" agent\n    approved\n    \n        author  {\n           \n        node  {\n           databaseId\n    email\n    id\n    name\n    url\n          \n      __typename\n      \n  ... on User {\n     id\n  }\n\n    \n        }\n      \n          \n        }\n      \n    authorIp\n    \n        commentedOn  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    content\n    databaseId\n    date\n    dateGmt\n    id\n    karma\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    \n        replies (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    type\n    __typename","builtFragments":"","settings":{}},"contentTypes":{"typeInfo":{"singularName":"contentType","pluralName":"contentTypes","nodesTypeName":"ContentType"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    contentTypes (first: $first, after: $after, ) {\n      \n        nodes {\n           archivePath\n    canExport\n    \n        connectedTaxonomies (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    deleteWithUser\n    description\n    excludeFromSearch\n    graphqlPluralName\n    graphqlSingleName\n    hasArchive\n    hierarchical\n    id\n    isContentNode\n    isFrontPage\n    isPostsPage\n    isTermNode\n    label\n    \n        labels  {\n           addNew\n    addNewItem\n    allItems\n    archives\n    attributes\n    editItem\n    featuredImage\n    filterItemsList\n    insertIntoItem\n    itemsList\n    itemsListNavigation\n    menuName\n    name\n    newItem\n    notFound\n    notFoundInTrash\n    parentItemColon\n    removeFeaturedImage\n    searchItems\n    setFeaturedImage\n    singularName\n    uploadedToThisItem\n    useFeaturedImage\n    viewItem\n    viewItems\n          \n        }\n      \n    menuIcon\n    menuPosition\n    name\n    public\n    publiclyQueryable\n    restBase\n    restControllerClass\n    showInAdminBar\n    showInGraphql\n    showInMenu\n    showInNavMenus\n    showInRest\n    showUi\n    uri\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    contentType (id: $id) {\n       archivePath\n    canExport\n    \n        connectedTaxonomies (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    deleteWithUser\n    description\n    excludeFromSearch\n    graphqlPluralName\n    graphqlSingleName\n    hasArchive\n    hierarchical\n    id\n    isContentNode\n    isFrontPage\n    isPostsPage\n    isTermNode\n    label\n    \n        labels  {\n           addNew\n    addNewItem\n    allItems\n    archives\n    attributes\n    editItem\n    featuredImage\n    filterItemsList\n    insertIntoItem\n    itemsList\n    itemsListNavigation\n    menuName\n    name\n    newItem\n    notFound\n    notFoundInTrash\n    parentItemColon\n    removeFeaturedImage\n    searchItems\n    setFeaturedImage\n    singularName\n    uploadedToThisItem\n    useFeaturedImage\n    viewItem\n    viewItems\n          \n        }\n      \n    menuIcon\n    menuPosition\n    name\n    public\n    publiclyQueryable\n    restBase\n    restControllerClass\n    showInAdminBar\n    showInGraphql\n    showInMenu\n    showInNavMenus\n    showInRest\n    showUi\n    uri\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    contentType (id: $id, idType: ID, asPreview: true) {\n       archivePath\n    canExport\n    \n        connectedTaxonomies (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    deleteWithUser\n    description\n    excludeFromSearch\n    graphqlPluralName\n    graphqlSingleName\n    hasArchive\n    hierarchical\n    id\n    isContentNode\n    isFrontPage\n    isPostsPage\n    isTermNode\n    label\n    \n        labels  {\n           addNew\n    addNewItem\n    allItems\n    archives\n    attributes\n    editItem\n    featuredImage\n    filterItemsList\n    insertIntoItem\n    itemsList\n    itemsListNavigation\n    menuName\n    name\n    newItem\n    notFound\n    notFoundInTrash\n    parentItemColon\n    removeFeaturedImage\n    searchItems\n    setFeaturedImage\n    singularName\n    uploadedToThisItem\n    useFeaturedImage\n    viewItem\n    viewItems\n          \n        }\n      \n    menuIcon\n    menuPosition\n    name\n    public\n    publiclyQueryable\n    restBase\n    restControllerClass\n    showInAdminBar\n    showInGraphql\n    showInMenu\n    showInNavMenus\n    showInRest\n    showUi\n    uri\n    __typename\n    }\n  }\n\n  \n","selectionSet":" archivePath\n    canExport\n    \n        connectedTaxonomies (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    deleteWithUser\n    description\n    excludeFromSearch\n    graphqlPluralName\n    graphqlSingleName\n    hasArchive\n    hierarchical\n    id\n    isContentNode\n    isFrontPage\n    isPostsPage\n    isTermNode\n    label\n    \n        labels  {\n           addNew\n    addNewItem\n    allItems\n    archives\n    attributes\n    editItem\n    featuredImage\n    filterItemsList\n    insertIntoItem\n    itemsList\n    itemsListNavigation\n    menuName\n    name\n    newItem\n    notFound\n    notFoundInTrash\n    parentItemColon\n    removeFeaturedImage\n    searchItems\n    setFeaturedImage\n    singularName\n    uploadedToThisItem\n    useFeaturedImage\n    viewItem\n    viewItems\n          \n        }\n      \n    menuIcon\n    menuPosition\n    name\n    public\n    publiclyQueryable\n    restBase\n    restControllerClass\n    showInAdminBar\n    showInGraphql\n    showInMenu\n    showInNavMenus\n    showInRest\n    showUi\n    uri\n    __typename","builtFragments":"","settings":{}},"mediaItems":{"typeInfo":{"singularName":"mediaItem","pluralName":"mediaItems","nodesTypeName":"MediaItem"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    mediaItems (first: $first, after: $after, ) {\n      \n        nodes {\n           altText\n    \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    caption\n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    description\n    desiredSlug\n    enclosure\n    fileSize\n    guid\n    id\n    isContentNode\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    \n        mediaDetails  {\n           file\n    height\n    \n        meta  {\n           aperture\n    camera\n    caption\n    copyright\n    createdTimestamp\n    credit\n    focalLength\n    iso\n    keywords\n    orientation\n    shutterSpeed\n    title\n          \n        }\n      \n    \n        sizes  {\n           file\n    fileSize\n    height\n    mimeType\n    name\n    sourceUrl\n    width\n          \n        }\n      \n    width\n          \n        }\n      \n    mediaItemUrl\n    mediaType\n    mimeType\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    sizes\n    slug\n    sourceUrl\n    srcSet\n    status\n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    title\n    uri\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    mediaItem (id: $id) {\n       altText\n    \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    caption\n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    description\n    desiredSlug\n    enclosure\n    fileSize\n    guid\n    id\n    isContentNode\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    \n        mediaDetails  {\n           file\n    height\n    \n        meta  {\n           aperture\n    camera\n    caption\n    copyright\n    createdTimestamp\n    credit\n    focalLength\n    iso\n    keywords\n    orientation\n    shutterSpeed\n    title\n          \n        }\n      \n    \n        sizes  {\n           file\n    fileSize\n    height\n    mimeType\n    name\n    sourceUrl\n    width\n          \n        }\n      \n    width\n          \n        }\n      \n    mediaItemUrl\n    mediaType\n    mimeType\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    sizes\n    slug\n    sourceUrl\n    srcSet\n    status\n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    title\n    uri\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    mediaItem (id: $id, idType: ID, asPreview: true) {\n       altText\n    \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    caption\n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    description\n    desiredSlug\n    enclosure\n    fileSize\n    guid\n    id\n    isContentNode\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    \n        mediaDetails  {\n           file\n    height\n    \n        meta  {\n           aperture\n    camera\n    caption\n    copyright\n    createdTimestamp\n    credit\n    focalLength\n    iso\n    keywords\n    orientation\n    shutterSpeed\n    title\n          \n        }\n      \n    \n        sizes  {\n           file\n    fileSize\n    height\n    mimeType\n    name\n    sourceUrl\n    width\n          \n        }\n      \n    width\n          \n        }\n      \n    mediaItemUrl\n    mediaType\n    mimeType\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    sizes\n    slug\n    sourceUrl\n    srcSet\n    status\n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    title\n    uri\n    __typename\n    }\n  }\n\n  \n","selectionSet":" altText\n    \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    caption\n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    description\n    desiredSlug\n    enclosure\n    fileSize\n    guid\n    id\n    isContentNode\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    \n        mediaDetails  {\n           file\n    height\n    \n        meta  {\n           aperture\n    camera\n    caption\n    copyright\n    createdTimestamp\n    credit\n    focalLength\n    iso\n    keywords\n    orientation\n    shutterSpeed\n    title\n          \n        }\n      \n    \n        sizes  {\n           file\n    fileSize\n    height\n    mimeType\n    name\n    sourceUrl\n    width\n          \n        }\n      \n    width\n          \n        }\n      \n    mediaItemUrl\n    mediaType\n    mimeType\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    sizes\n    slug\n    sourceUrl\n    srcSet\n    status\n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    title\n    uri\n    __typename","builtFragments":"","settings":{"lazyNodes":false,"createFileNodes":true,"localFile":{"excludeByMimeTypes":[],"maxFileSizeBytes":100000000,"requestConcurrency":1}}},"menuItems":{"typeInfo":{"singularName":"menuItem","pluralName":"menuItems","nodesTypeName":"MenuItem"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    menuItems (first: $first, after: $after, ) {\n      \n        nodes {\n           \n        childItems (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        connectedNode  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    cssClasses\n    databaseId\n    description\n    id\n    label\n    linkRelationship\n    locations\n    \n        menu  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    order\n    parentDatabaseId\n    parentId\n    path\n    target\n    title\n    url\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    menuItem (id: $id) {\n       \n        childItems (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        connectedNode  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    cssClasses\n    databaseId\n    description\n    id\n    label\n    linkRelationship\n    locations\n    \n        menu  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    order\n    parentDatabaseId\n    parentId\n    path\n    target\n    title\n    url\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    menuItem (id: $id, idType: ID, asPreview: true) {\n       \n        childItems (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        connectedNode  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    cssClasses\n    databaseId\n    description\n    id\n    label\n    linkRelationship\n    locations\n    \n        menu  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    order\n    parentDatabaseId\n    parentId\n    path\n    target\n    title\n    url\n    __typename\n    }\n  }\n\n  \n","selectionSet":" \n        childItems (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        connectedNode  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    cssClasses\n    databaseId\n    description\n    id\n    label\n    linkRelationship\n    locations\n    \n        menu  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    order\n    parentDatabaseId\n    parentId\n    path\n    target\n    title\n    url\n    __typename","builtFragments":"","settings":{}},"menus":{"typeInfo":{"singularName":"menu","pluralName":"menus","nodesTypeName":"Menu"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    menus (first: $first, after: $after, ) {\n      \n        nodes {\n           count\n    databaseId\n    id\n    locations\n    \n        menuItems (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    name\n    slug\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    menu (id: $id) {\n       count\n    databaseId\n    id\n    locations\n    \n        menuItems (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    name\n    slug\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    menu (id: $id, idType: ID, asPreview: true) {\n       count\n    databaseId\n    id\n    locations\n    \n        menuItems (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    name\n    slug\n    __typename\n    }\n  }\n\n  \n","selectionSet":" count\n    databaseId\n    id\n    locations\n    \n        menuItems (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    name\n    slug\n    __typename","builtFragments":"","settings":{}},"pages":{"typeInfo":{"singularName":"page","pluralName":"pages","nodesTypeName":"Page"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    pages (first: $first, after: $after, ) {\n      \n        nodes {\n           \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    \n        homepageQuery  {\n           companiesTitle\n    fieldGroupName\n    \n        heroSlider  {\n           \n        background  {\n           __typename\n    id\n          \n        }\n      \n    buttonLink\n    buttonName\n    content\n    fieldGroupName\n    title\n          \n        }\n      \n    \n        logos  {\n           fieldGroupName\n    \n        logo  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    \n        missionImage  {\n           __typename\n    id\n          \n        }\n      \n    missionText\n    missionTitle\n    missionUrl\n    \n        news  {\n          \n          \n      __typename\n      \n  ... on Post {\n     id\n  }\n\n    \n        }\n      \n    newsTitle\n    \n        products  {\n          \n          \n      __typename\n      \n  ... on Product {\n     id\n  }\n\n    \n        }\n      \n    productsTitle\n    \n        testimonial  {\n           \n        avatar  {\n           __typename\n    id\n          \n        }\n      \n    fieldGroupName\n    stars\n    testimonialSubtitle\n    testimonialText\n    testimonialTitle\n          \n        }\n      \n          \n        }\n      \n    id\n    isContentNode\n    isFrontPage\n    isPostsPage\n    isPrivacyPage\n    isRevision\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    menuOrder\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    slug\n    status\n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    title\n    uri\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    page (id: $id) {\n       \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    \n        homepageQuery  {\n           companiesTitle\n    fieldGroupName\n    \n        heroSlider  {\n           \n        background  {\n           __typename\n    id\n          \n        }\n      \n    buttonLink\n    buttonName\n    content\n    fieldGroupName\n    title\n          \n        }\n      \n    \n        logos  {\n           fieldGroupName\n    \n        logo  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    \n        missionImage  {\n           __typename\n    id\n          \n        }\n      \n    missionText\n    missionTitle\n    missionUrl\n    \n        news  {\n          \n          \n      __typename\n      \n  ... on Post {\n     id\n  }\n\n    \n        }\n      \n    newsTitle\n    \n        products  {\n          \n          \n      __typename\n      \n  ... on Product {\n     id\n  }\n\n    \n        }\n      \n    productsTitle\n    \n        testimonial  {\n           \n        avatar  {\n           __typename\n    id\n          \n        }\n      \n    fieldGroupName\n    stars\n    testimonialSubtitle\n    testimonialText\n    testimonialTitle\n          \n        }\n      \n          \n        }\n      \n    id\n    isContentNode\n    isFrontPage\n    isPostsPage\n    isPrivacyPage\n    isRevision\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    menuOrder\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    slug\n    status\n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    title\n    uri\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    page (id: $id, idType: ID, asPreview: true) {\n       \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    \n        homepageQuery  {\n           companiesTitle\n    fieldGroupName\n    \n        heroSlider  {\n           \n        background  {\n           __typename\n    id\n          \n        }\n      \n    buttonLink\n    buttonName\n    content\n    fieldGroupName\n    title\n          \n        }\n      \n    \n        logos  {\n           fieldGroupName\n    \n        logo  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    \n        missionImage  {\n           __typename\n    id\n          \n        }\n      \n    missionText\n    missionTitle\n    missionUrl\n    \n        news  {\n          \n          \n      __typename\n      \n  ... on Post {\n     id\n  }\n\n    \n        }\n      \n    newsTitle\n    \n        products  {\n          \n          \n      __typename\n      \n  ... on Product {\n     id\n  }\n\n    \n        }\n      \n    productsTitle\n    \n        testimonial  {\n           \n        avatar  {\n           __typename\n    id\n          \n        }\n      \n    fieldGroupName\n    stars\n    testimonialSubtitle\n    testimonialText\n    testimonialTitle\n          \n        }\n      \n          \n        }\n      \n    id\n    isContentNode\n    isFrontPage\n    isPostsPage\n    isPrivacyPage\n    isRevision\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    menuOrder\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    slug\n    status\n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    title\n    uri\n    __typename\n    }\n  }\n\n  \n","selectionSet":" \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    \n        homepageQuery  {\n           companiesTitle\n    fieldGroupName\n    \n        heroSlider  {\n           \n        background  {\n           __typename\n    id\n          \n        }\n      \n    buttonLink\n    buttonName\n    content\n    fieldGroupName\n    title\n          \n        }\n      \n    \n        logos  {\n           fieldGroupName\n    \n        logo  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    \n        missionImage  {\n           __typename\n    id\n          \n        }\n      \n    missionText\n    missionTitle\n    missionUrl\n    \n        news  {\n          \n          \n      __typename\n      \n  ... on Post {\n     id\n  }\n\n    \n        }\n      \n    newsTitle\n    \n        products  {\n          \n          \n      __typename\n      \n  ... on Product {\n     id\n  }\n\n    \n        }\n      \n    productsTitle\n    \n        testimonial  {\n           \n        avatar  {\n           __typename\n    id\n          \n        }\n      \n    fieldGroupName\n    stars\n    testimonialSubtitle\n    testimonialText\n    testimonialTitle\n          \n        }\n      \n          \n        }\n      \n    id\n    isContentNode\n    isFrontPage\n    isPostsPage\n    isPrivacyPage\n    isRevision\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    menuOrder\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    slug\n    status\n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    title\n    uri\n    __typename","builtFragments":"","settings":{}},"postFormats":{"typeInfo":{"singularName":"postFormat","pluralName":"postFormats","nodesTypeName":"PostFormat"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    postFormats (first: $first, after: $after, ) {\n      \n        nodes {\n           \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    postFormat (id: $id) {\n       \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    postFormat (id: $id, idType: ID, asPreview: true) {\n       \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename\n    }\n  }\n\n  \n","selectionSet":" \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename","builtFragments":"","settings":{}},"posts":{"typeInfo":{"singularName":"post","pluralName":"posts","nodesTypeName":"Post"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    posts (first: $first, after: $after, ) {\n      \n        nodes {\n           \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    \n        categories (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    excerpt\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    id\n    isContentNode\n    isRevision\n    isSticky\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    modified\n    modifiedGmt\n    pingStatus\n    pinged\n    \n        postFormats (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    status\n    \n        tags (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    \n        terms (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    title\n    toPing\n    uri\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    post (id: $id) {\n       \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    \n        categories (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    excerpt\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    id\n    isContentNode\n    isRevision\n    isSticky\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    modified\n    modifiedGmt\n    pingStatus\n    pinged\n    \n        postFormats (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    status\n    \n        tags (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    \n        terms (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    title\n    toPing\n    uri\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    post (id: $id, idType: ID, asPreview: true) {\n       \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    \n        categories (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    excerpt\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    id\n    isContentNode\n    isRevision\n    isSticky\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    modified\n    modifiedGmt\n    pingStatus\n    pinged\n    \n        postFormats (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    status\n    \n        tags (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    \n        terms (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    title\n    toPing\n    uri\n    __typename\n    }\n  }\n\n  \n","selectionSet":" \n        author  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    authorDatabaseId\n    authorId\n    \n        categories (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    commentCount\n    commentStatus\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    excerpt\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    id\n    isContentNode\n    isRevision\n    isSticky\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    modified\n    modifiedGmt\n    pingStatus\n    pinged\n    \n        postFormats (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    status\n    \n        tags (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    \n        terms (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    title\n    toPing\n    uri\n    __typename","builtFragments":"","settings":{}},"products":{"typeInfo":{"singularName":"product","pluralName":"products","nodesTypeName":"Product"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    products (first: $first, after: $after, ) {\n      \n        nodes {\n           \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        categories (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    excerpt\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    id\n    isContentNode\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    slug\n    status\n    \n        tags (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    \n        terms (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    title\n    uri\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    product (id: $id) {\n       \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        categories (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    excerpt\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    id\n    isContentNode\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    slug\n    status\n    \n        tags (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    \n        terms (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    title\n    uri\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    product (id: $id, idType: ID, asPreview: true) {\n       \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        categories (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    excerpt\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    id\n    isContentNode\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    slug\n    status\n    \n        tags (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    \n        terms (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    title\n    uri\n    __typename\n    }\n  }\n\n  \n","selectionSet":" \n        ancestors (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    \n        categories (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        wpChildren: children (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    content\n    \n        contentType  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    contentTypeName\n    databaseId\n    date\n    dateGmt\n    desiredSlug\n    enclosure\n    excerpt\n    \n        featuredImage  {\n           \n        node  {\n           __typename\n    id\n          \n        }\n      \n          \n        }\n      \n    featuredImageDatabaseId\n    featuredImageId\n    guid\n    id\n    isContentNode\n    isTermNode\n    \n        lastEditedBy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    link\n    modified\n    modifiedGmt\n    \n        wpParent: parent  {\n           \n        node  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    parentDatabaseId\n    parentId\n    slug\n    status\n    \n        tags (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        template  {\n           templateName\n          \n      __typename\n      \n    \n        }\n      \n    \n        terms (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    title\n    uri\n    __typename","builtFragments":"","settings":{}},"tags":{"typeInfo":{"singularName":"tag","pluralName":"tags","nodesTypeName":"Tag"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    tags (first: $first, after: $after, ) {\n      \n        nodes {\n           \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        products (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    tag (id: $id) {\n       \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        products (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    tag (id: $id, idType: ID, asPreview: true) {\n       \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        products (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename\n    }\n  }\n\n  \n","selectionSet":" \n        contentNodes (first: 100) {\n           \n        nodes  {\n           id\n    __typename\n          \n        }\n      \n          \n        }\n      \n    count\n    databaseId\n    description\n    id\n    isContentNode\n    isTermNode\n    link\n    name\n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        products (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    \n        taxonomy  {\n           \n        node  {\n           id\n          \n        }\n      \n          \n        }\n      \n    taxonomyName\n    termGroupId\n    termTaxonomyId\n    uri\n    __typename","builtFragments":"","settings":{}},"taxonomies":{"typeInfo":{"singularName":"taxonomy","pluralName":"taxonomies","nodesTypeName":"Taxonomy"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    taxonomies (first: $first, after: $after, ) {\n      \n        nodes {\n           archivePath\n    \n        connectedContentTypes (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    description\n    graphqlPluralName\n    graphqlSingleName\n    hierarchical\n    id\n    label\n    name\n    public\n    restBase\n    restControllerClass\n    showCloud\n    showInAdminColumn\n    showInGraphql\n    showInMenu\n    showInNavMenus\n    showInQuickEdit\n    showInRest\n    showUi\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    taxonomy (id: $id) {\n       archivePath\n    \n        connectedContentTypes (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    description\n    graphqlPluralName\n    graphqlSingleName\n    hierarchical\n    id\n    label\n    name\n    public\n    restBase\n    restControllerClass\n    showCloud\n    showInAdminColumn\n    showInGraphql\n    showInMenu\n    showInNavMenus\n    showInQuickEdit\n    showInRest\n    showUi\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    taxonomy (id: $id, idType: ID, asPreview: true) {\n       archivePath\n    \n        connectedContentTypes (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    description\n    graphqlPluralName\n    graphqlSingleName\n    hierarchical\n    id\n    label\n    name\n    public\n    restBase\n    restControllerClass\n    showCloud\n    showInAdminColumn\n    showInGraphql\n    showInMenu\n    showInNavMenus\n    showInQuickEdit\n    showInRest\n    showUi\n    __typename\n    }\n  }\n\n  \n","selectionSet":" archivePath\n    \n        connectedContentTypes (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    description\n    graphqlPluralName\n    graphqlSingleName\n    hierarchical\n    id\n    label\n    name\n    public\n    restBase\n    restControllerClass\n    showCloud\n    showInAdminColumn\n    showInGraphql\n    showInMenu\n    showInNavMenus\n    showInQuickEdit\n    showInRest\n    showUi\n    __typename","builtFragments":"","settings":{}},"userRoles":{"typeInfo":{"singularName":"userRole","pluralName":"userRoles","nodesTypeName":"UserRole"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    userRoles (first: $first, after: $after, ) {\n      \n        nodes {\n           capabilities\n    displayName\n    id\n    name\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    userRole (id: $id) {\n       capabilities\n    displayName\n    id\n    name\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    userRole (id: $id, idType: ID, asPreview: true) {\n       capabilities\n    displayName\n    id\n    name\n    __typename\n    }\n  }\n\n  \n","selectionSet":" capabilities\n    displayName\n    id\n    name\n    __typename","builtFragments":"","settings":{}},"users":{"typeInfo":{"singularName":"user","pluralName":"users","nodesTypeName":"User"},"nodeListQueries":["\n  query NODE_LIST_QUERY ($first: Int!, $after: String, ) {\n    users (first: $first, after: $after, ) {\n      \n        nodes {\n           \n        avatar  {\n           default\n    extraAttr\n    forceDefault\n    foundAvatar\n    height\n    rating\n    scheme\n    size\n    url\n    width\n          \n        }\n      \n    capKey\n    capabilities\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    databaseId\n    description\n    email\n    extraCapabilities\n    firstName\n    id\n    isContentNode\n    isTermNode\n    lastName\n    locale\n    name\n    nicename\n    nickname\n    \n        pages (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    registeredDate\n    \n        roles (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    uri\n    url\n    username\n    __typename\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      \n    }\n  }\n\n  \n"],"nodeQuery":"\n  query SINGLE_CONTENT_QUERY ($id: ID!) {\n    user (id: $id) {\n       \n        avatar  {\n           default\n    extraAttr\n    forceDefault\n    foundAvatar\n    height\n    rating\n    scheme\n    size\n    url\n    width\n          \n        }\n      \n    capKey\n    capabilities\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    databaseId\n    description\n    email\n    extraCapabilities\n    firstName\n    id\n    isContentNode\n    isTermNode\n    lastName\n    locale\n    name\n    nicename\n    nickname\n    \n        pages (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    registeredDate\n    \n        roles (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    uri\n    url\n    username\n    __typename\n    }\n  }\n\n  \n","previewQuery":"\n  query PREVIEW_QUERY ($id: ID!) {\n    user (id: $id, idType: ID, asPreview: true) {\n       \n        avatar  {\n           default\n    extraAttr\n    forceDefault\n    foundAvatar\n    height\n    rating\n    scheme\n    size\n    url\n    width\n          \n        }\n      \n    capKey\n    capabilities\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    databaseId\n    description\n    email\n    extraCapabilities\n    firstName\n    id\n    isContentNode\n    isTermNode\n    lastName\n    locale\n    name\n    nicename\n    nickname\n    \n        pages (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    registeredDate\n    \n        roles (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    uri\n    url\n    username\n    __typename\n    }\n  }\n\n  \n","selectionSet":" \n        avatar  {\n           default\n    extraAttr\n    forceDefault\n    foundAvatar\n    height\n    rating\n    scheme\n    size\n    url\n    width\n          \n        }\n      \n    capKey\n    capabilities\n    \n        comments (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    databaseId\n    description\n    email\n    extraCapabilities\n    firstName\n    id\n    isContentNode\n    isTermNode\n    lastName\n    locale\n    name\n    nicename\n    nickname\n    \n        pages (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    \n        posts (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    registeredDate\n    \n        roles (first: 100) {\n           \n        nodes  {\n           id\n          \n        }\n      \n          \n        }\n      \n    slug\n    uri\n    url\n    username\n    __typename","builtFragments":"","settings":{}}}}